name: Handle Spotify and weather data

on:
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch:

env:
  SPOTIFY_AUTHORIZATION_URL: ${{ secrets.SPOTIFY_AUTHORIZATION_URL }}
  SPOTIFY_API_TOKEN_URL: ${{ secrets.SPOTIFY_API_TOKEN_URL }}
  SPOTIFY_API_URL: ${{ secrets.SPOTIFY_API_URL }}
  SPOTIFY_CLIENT_ID: ${{ secrets.SPOTIFY_CLIENT_ID }}
  SPOTIFY_CLIENT_SECRET: ${{ secrets.SPOTIFY_CLIENT_SECRET }}

  CLIENT_SPOTIFY_AUTHORIZATION_URL: ${{ secrets.CLIENT_SPOTIFY_AUTHORIZATION_URL }}

  MONGODB_USERNAME: ${{ secrets.MONGODB_USERNAME }}
  MONGODB_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}

  ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}

jobs:
  handle_data:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: 'main'

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install Poetry Cache
      uses: actions/cache@v2
      with:
        path: ~/.local
        key: poetry-1.8.2

    - uses: snok/install-poetry@v1
      with:
        version: 1.8.2
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: |
        poetry install

    - name: Cache dependencies
      id: cache-dependencies
      uses: actions/cache@v2
      with:
        path: .venv
        key: pydeps-${{ hashFiles('**/poetry.lock') }}

    - run: poetry install --no-interaction --no-root
      if: steps.cache-dependencies.outputs.cache-hit != 'true'

    - name: Setup DVC
      uses: iterative/setup-dvc@v1
      with:
        version: '3.48.4'

    - name: Setup Dagshub
      run: |
        poetry run dvc remote modify origin endpointurl https://dagshub.com/kristjansuligoj/iis-projekt.s3
        poetry run dvc remote modify origin --local access_key_id ${{ secrets.DAGSHUB_ACCESS_KEY_ID }}
        poetry run dvc remote modify origin --local secret_access_key ${{ secrets.DAGSHUB_SECRET_ACCESS_KEY }}

    - name: Pull data
      run: |
        poetry run dvc pull -r origin

    - name: Unprotect
      run: |
        poetry run dvc unprotect data

    - name: Fetch Spotify data
      run: poetry run python src/data/fetch_spotify_data.py

    - name: Preprocess Spotify data
      run: poetry run python src/data/preprocess_spotify_data.py

    - name: Fetch weather data
      run: poetry run python src/data/fetch_weather_data.py

    - name: Preprocess weather data
      run: poetry run python src/data/preprocess_weather_data.py

    - name: Merge processed data
      run: poetry run python src/data/merge_processed_data.py

    - name: Add data to DVC
      run: |
        poetry run dvc add data

    - name: DVC push
      run: |
        poetry run dvc push -r origin

    - uses: stefanzweifel/git-auto-commit-action@v5
      with:
        commit_message: Update data dvc


  validate_data:
    needs: handle_data
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: 'main'

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install Poetry Cache
        uses: actions/cache@v2
        with:
          path: ~/.local
          key: poetry-1.8.2

      - uses: snok/install-poetry@v1
        with:
          version: 1.8.2
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: |
          poetry install

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: pydeps-${{ hashFiles('**/poetry.lock') }}

      - run: poetry install --no-interaction --no-root
        if: steps.cache-dependencies.outputs.cache-hit != 'true'

      - name: Setup DVC
        uses: iterative/setup-dvc@v1
        with:
          version: '3.48.4'

      - name: Setup Dagshub
        run: |
          poetry run dvc remote modify origin endpointurl https://dagshub.com/kristjansuligoj/iis-projekt.s3
          poetry run dvc remote modify origin --local access_key_id ${{ secrets.DAGSHUB_ACCESS_KEY_ID }}
          poetry run dvc remote modify origin --local secret_access_key ${{ secrets.DAGSHUB_SECRET_ACCESS_KEY }}

      - name: Pull data
        run: |
          poetry run dvc pull -r origin

      - name: Update current data
        run: |
          cp data/processed/processed_data.csv data/current_data.csv

      - name: Validate data
        run: |
          poetry run python src/data/validate_data.py

      - name: Deploy validation output to Netlify
        uses: nwtgck/actions-netlify@v1.2
        with:
          publish-dir: "gx/uncommitted/data_docs/local_site"
          production-deploy: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}


  test_data:
    needs: validate_data
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: 'main'

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install Poetry Cache
        uses: actions/cache@v2
        with:
          path: ~/.local
          key: poetry-1.8.2

      - uses: snok/install-poetry@v1
        with:
          version: 1.8.2
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: |
          poetry install

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: pydeps-${{ hashFiles('**/poetry.lock') }}

      - run: poetry install --no-interaction --no-root
        if: steps.cache-dependencies.outputs.cache-hit != 'true'

      - name: Setup DVC
        uses: iterative/setup-dvc@v1
        with:
          version: '3.48.4'

      - name: Setup Dagshub
        run: |
          poetry run dvc remote modify origin endpointurl https://dagshub.com/kristjansuligoj/iis-projekt.s3
          poetry run dvc remote modify origin --local access_key_id ${{ secrets.DAGSHUB_ACCESS_KEY_ID }}
          poetry run dvc remote modify origin --local secret_access_key ${{ secrets.DAGSHUB_SECRET_ACCESS_KEY }}

      - name: Pull data
        run: |
          poetry run dvc pull -r origin

      - name: Unprotect
        run: |
          poetry run dvc unprotect data

      - name: Update current data
        run: |
          cp data/processed/processed_data.csv data/current_data.csv

      - name: Test data
        run: |
          poetry run python src/data/evidently_test_data.py

      - name: Update reference data
        run: |
          cp data/current_data.csv data/reference_data.csv

      - name: Add data to DVC
        run: |
          poetry run dvc add data

      - name: DVC push
        run: |
          poetry run dvc push -r origin

      - uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: Update data dvc


  split_data:
    needs: test_data
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: 'main'

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install Poetry Cache
        uses: actions/cache@v2
        with:
          path: ~/.local
          key: poetry-1.8.2

      - uses: snok/install-poetry@v1
        with:
          version: 1.8.2
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: |
          poetry install

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: pydeps-${{ hashFiles('**/poetry.lock') }}

      - run: poetry install --no-interaction --no-root
        if: steps.cache-dependencies.outputs.cache-hit != 'true'

      - name: Setup DVC
        uses: iterative/setup-dvc@v1
        with:
          version: '3.48.4'

      - name: Setup Dagshub
        run: |
          poetry run dvc remote modify origin endpointurl https://dagshub.com/kristjansuligoj/iis-projekt.s3
          poetry run dvc remote modify origin --local access_key_id ${{ secrets.DAGSHUB_ACCESS_KEY_ID }}
          poetry run dvc remote modify origin --local secret_access_key ${{ secrets.DAGSHUB_SECRET_ACCESS_KEY }}

      - name: Pull data
        run: |
          poetry run dvc pull -r origin

      - name: Unprotect
        run: |
          poetry run dvc unprotect data

      - name: Split data
        run: |
          poetry run python src/data/split_data.py

      - name: Add data to DVC
        run: |
          poetry run dvc add data

      - name: DVC push
        run: |
          poetry run dvc push -r origin

      - uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: Update data dvc